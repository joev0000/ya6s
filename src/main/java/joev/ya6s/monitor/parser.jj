options {
  STATIC = false;
}

PARSER_BEGIN(MonitorParser)
package joev.ya6s.monitor;

import java.util.ArrayList;
import java.util.List;

public class MonitorParser {
}

PARSER_END(MonitorParser)

SKIP: { " " | "\t" }

TOKEN [IGNORE_CASE]: {
  <EXIT:  "e" | "exit"> |
  <READ:  "r" | "read"> |
  <WRITE: "w" | "write"> |
  <CONT:  "c" | "cont"> |
  <STEP:  "s" | "step"> |
  <LOAD:  "l" | "load"> |
  <RESET:       "reset">
}

TOKEN: {
  <HEX_NUMBER: (["0"-"9","A"-"F","a"-"f"])+> |
  <LETTER: ["A"-"Z","a"-"z"]> |
  <FILENAME_CHAR: <LETTER> | ["0"-"9","!"-"/",":"-"@","["-"`","{"-"~"]> |
  <FILENAME: (<FILENAME_CHAR>)+>
}

Command command(): { Command c = null; }
{
  (
    c = exit() |
    c = read() |
    c = write() |
    c = cont() |
    c = step() |
    c = load() |
    c = reset() |
    "\n"
  ) {return c == null? NoopCommand.instance() : c;}
}


Command exit(): { }
{
  (<EXIT> "\n" | <EOF>) {
    return ExitCommand.instance();
  }
}

Command reset(): { }
{
  <RESET> "\n" { return ResetCommand.instance(); }
}

Command read(): {
  Token start;
  Token end = null;
}
{
  <READ> start=<HEX_NUMBER> (end=<HEX_NUMBER>)? "\n" {
    ReadCommand cmd;
    if(end != null) {
      cmd = new ReadCommand(
        (short)Integer.parseInt(start.image, 16),
        (short)Integer.parseInt(end.image, 16));
    }
    else {
      cmd = new ReadCommand((short)Integer.parseInt(start.image, 16));
    }
    return cmd;
  }
}

Command write(): {
  Token t;
  int start;
  List<Integer> list = new ArrayList<>();
}
{
  <WRITE> t=<HEX_NUMBER> { start = Integer.parseInt(t.image, 16); }
  ( t=<HEX_NUMBER> { list.add(Integer.parseInt(t.image, 16)); } )* "\n"
  {
    byte[] data = new byte[list.size()];
    int i = 0;
    for(Integer value: list) {
      data[i++] = value.byteValue();
    }
    return new WriteCommand((short)start, data);
  }
}

Command cont(): { }
{
  <CONT> "\n" { return ContinueCommand.instance(); }
}

Command step(): { }
{
  <STEP> "\n" { return StepCommand.instance(); }
}

Command load(): {
  Token start;
  Token path;
}
{
  <LOAD> start=<HEX_NUMBER> path=<FILENAME> "\n" { return new LoadCommand((short)Integer.parseInt(start.image, 16), path.image); }
}
